import { CellType } from 'types';

const mockData: { [key: string]: RawData } = {
  b3JlbSBp: {
    dimensions: {
      cols: 10,
      rows: 10,
    },
    start: [0, 0],
    end: [7, 7],
    obstacles: [
      { position: [0, 5], type: CellType.wall },
      { position: [1, 5], type: CellType.wall },
      { position: [2, 5], type: CellType.wall },
      { position: [3, 5], type: CellType.wall },
      { position: [5, 7], type: CellType.wall },
      { position: [5, 8], type: CellType.wall },
      { position: [5, 9], type: CellType.wall },
      { position: [7, 5], type: CellType.wall },
      { position: [8, 5], type: CellType.wall },
      { position: [9, 5], type: CellType.wall },
      { position: [5, 0], type: CellType.wall },
      { position: [5, 1], type: CellType.wall },
      { position: [5, 2], type: CellType.wall },
      { position: [5, 3], type: CellType.wall },
      { position: [5, 6], type: CellType.void },
      { position: [6, 4], type: CellType.enemy },
    ],
  },
  cHN1bSBk: {
    dimensions: {
      cols: 10,
      rows: 10,
    },
    start: [0, 0],
    end: [7, 8],
    obstacles: [
      { position: [7, 4], type: CellType.wall },
      { position: [7, 5], type: CellType.wall },
      { position: [8, 4], type: CellType.wall },
      { position: [8, 5], type: CellType.wall },
      { position: [2, 0], type: CellType.wall },
      { position: [2, 1], type: CellType.wall },
      { position: [2, 2], type: CellType.wall },
      { position: [2, 3], type: CellType.wall },
      { position: [2, 4], type: CellType.wall },
      { position: [2, 5], type: CellType.wall },
      { position: [2, 6], type: CellType.wall },
      { position: [2, 7], type: CellType.wall },
      { position: [5, 1], type: CellType.wall },
      { position: [5, 2], type: CellType.wall },
      { position: [5, 3], type: CellType.wall },
      { position: [5, 4], type: CellType.wall },
      { position: [5, 5], type: CellType.wall },
      { position: [5, 6], type: CellType.wall },
      { position: [5, 7], type: CellType.wall },
      { position: [0, 1], type: CellType.void },
      { position: [1, 5], type: CellType.void },
      { position: [4, 5], type: CellType.void },
      { position: [6, 9], type: CellType.void },
      { position: [7, 9], type: CellType.void },
      { position: [8, 9], type: CellType.void },
      { position: [9, 9], type: CellType.void },
      { position: [6, 8], type: CellType.void },
      { position: [9, 8], type: CellType.void },
      { position: [5, 9], type: CellType.enemy },
      { position: [6, 7], type: CellType.enemy },
      { position: [9, 7], type: CellType.enemy },
    ],
  },
  b2xvciBz: {
    dimensions: {
      cols: 10,
      rows: 10,
    },
    start: [0, 0],
    end: [9, 6],
    obstacles: [
      { position: [0, 0], type: CellType.void },
      { position: [1, 1], type: CellType.enemy },
      { position: [1, 2], type: CellType.enemy },
      { position: [1, 5], type: CellType.void },
      { position: [1, 7], type: CellType.void },
      { position: [1, 8], type: CellType.void },
      { position: [6, 0], type: CellType.wall },
      { position: [2, 2], type: CellType.wall },
      { position: [2, 3], type: CellType.wall },
      { position: [2, 5], type: CellType.wall },
      { position: [2, 6], type: CellType.wall },
      { position: [3, 1], type: CellType.wall },
      { position: [3, 2], type: CellType.wall },
      { position: [3, 3], type: CellType.wall },
      { position: [3, 5], type: CellType.wall },
      { position: [3, 6], type: CellType.wall },
      { position: [3, 7], type: CellType.wall },
      { position: [3, 9], type: CellType.void },
      { position: [4, 1], type: CellType.wall },
      { position: [4, 2], type: CellType.wall },
      { position: [4, 5], type: CellType.void },
      { position: [4, 6], type: CellType.wall },
      { position: [4, 7], type: CellType.wall },
      { position: [5, 3], type: CellType.void },
      { position: [5, 8], type: CellType.enemy },
      { position: [6, 1], type: CellType.wall },
      { position: [6, 2], type: CellType.wall },
      { position: [6, 6], type: CellType.wall },
      { position: [6, 7], type: CellType.wall },
      { position: [7, 1], type: CellType.wall },
      { position: [7, 2], type: CellType.wall },
      { position: [7, 3], type: CellType.wall },
      { position: [7, 5], type: CellType.wall },
      { position: [7, 6], type: CellType.wall },
      { position: [7, 7], type: CellType.wall },
      { position: [7, 9], type: CellType.void },
      { position: [8, 2], type: CellType.wall },
      { position: [8, 3], type: CellType.wall },
      { position: [8, 4], type: CellType.void },
      { position: [8, 5], type: CellType.wall },
      { position: [8, 6], type: CellType.wall },
      { position: [9, 0], type: CellType.enemy },
      { position: [9, 8], type: CellType.enemy },
      { position: [9, 9], type: CellType.void },
    ],
  },
  as63faFS: {
    dimensions: {
      cols: 10,
      rows: 10,
    },
    start: [9, 0],
    end: [1, 8],
    obstacles: [
      { position: [0, 0], type: CellType.void },
      { position: [0, 3], type: CellType.void },
      { position: [1, 0], type: CellType.void },
      { position: [1, 5], type: CellType.void },
      { position: [2, 0], type: CellType.void },
      { position: [2, 1], type: CellType.void },
      { position: [2, 2], type: CellType.void },
      { position: [2, 6], type: CellType.void },
      { position: [3, 0], type: CellType.void },
      { position: [3, 1], type: CellType.void },
      { position: [3, 2], type: CellType.void },
      { position: [4, 8], type: CellType.void },
      { position: [5, 2], type: CellType.void },
      { position: [5, 3], type: CellType.void },
      { position: [5, 8], type: CellType.void },
      { position: [6, 3], type: CellType.void },
      { position: [6, 8], type: CellType.void },
      { position: [7, 8], type: CellType.void },
      { position: [8, 8], type: CellType.void },
      { position: [0, 8], type: CellType.enemy },
      { position: [0, 9], type: CellType.enemy },
      { position: [1, 6], type: CellType.enemy },
      { position: [2, 2], type: CellType.enemy },
      { position: [2, 4], type: CellType.enemy },
      { position: [2, 8], type: CellType.enemy },
      { position: [2, 7], type: CellType.enemy },
      { position: [5, 1], type: CellType.enemy },
      { position: [7, 0], type: CellType.enemy },
      { position: [7, 2], type: CellType.enemy },
      { position: [8, 3], type: CellType.enemy },
      { position: [9, 3], type: CellType.enemy },
      { position: [9, 6], type: CellType.enemy },
      { position: [3, 4], type: CellType.wall },
      { position: [3, 5], type: CellType.wall },
      { position: [3, 6], type: CellType.wall },
      { position: [5, 6], type: CellType.wall },
      { position: [6, 5], type: CellType.wall },
      { position: [7, 5], type: CellType.wall },
      { position: [7, 7], type: CellType.wall },
      { position: [8, 5], type: CellType.wall },
      { position: [9, 5], type: CellType.wall },
    ],
  },
  Ca3Sl1e: {
    dimensions: {
      cols: 10,
      rows: 10,
    },
    start: [4, 0],
    end: [2, 8],
    obstacles: [
      { position: [0, 1], type: CellType.enemy },
      { position: [0, 3], type: CellType.enemy },
      { position: [0, 5], type: CellType.enemy },
      { position: [1, 7], type: CellType.enemy },
      { position: [2, 1], type: CellType.enemy },
      { position: [2, 3], type: CellType.enemy },
      { position: [2, 5], type: CellType.enemy },
      { position: [2, 7], type: CellType.enemy },
      { position: [2, 9], type: CellType.enemy },
      { position: [4, 1], type: CellType.enemy },
      { position: [4, 3], type: CellType.enemy },
      { position: [4, 5], type: CellType.enemy },
      { position: [4, 7], type: CellType.enemy },
      { position: [6, 1], type: CellType.enemy },
      { position: [6, 3], type: CellType.enemy },
      { position: [6, 5], type: CellType.enemy },
      { position: [7, 7], type: CellType.enemy },
      { position: [8, 0], type: CellType.enemy },
      { position: [8, 2], type: CellType.enemy },
      { position: [8, 4], type: CellType.enemy },
      { position: [8, 6], type: CellType.enemy },
      { position: [8, 8], type: CellType.enemy },
      { position: [9, 7], type: CellType.enemy },
      { position: [1, 2], type: CellType.void },
      { position: [1, 8], type: CellType.void },
      { position: [3, 0], type: CellType.void },
      { position: [3, 3], type: CellType.void },
      { position: [3, 7], type: CellType.void },
      { position: [3, 9], type: CellType.void },
      { position: [5, 6], type: CellType.void },
      { position: [5, 7], type: CellType.void },
      { position: [7, 2], type: CellType.void },
      { position: [7, 4], type: CellType.void },
      { position: [9, 0], type: CellType.void },
      { position: [5, 6], type: CellType.wall },
      { position: [8, 9], type: CellType.wall },
      { position: [9, 9], type: CellType.wall },
    ],
  },
  EdxLvk5: {
    dimensions: {
      cols: 10,
      rows: 10,
    },
    start: [0, 0],
    end: [6, 6],
    obstacles: [
      { position: [0, 3], type: CellType.wall },
      { position: [1, 3], type: CellType.wall },
      { position: [1, 6], type: CellType.wall },
      { position: [2, 3], type: CellType.wall },
      { position: [2, 5], type: CellType.wall },
      { position: [2, 7], type: CellType.wall },
      { position: [3, 3], type: CellType.wall },
      { position: [3, 8], type: CellType.wall },
      { position: [5, 2], type: CellType.wall },
      { position: [5, 5], type: CellType.wall },
      { position: [5, 7], type: CellType.wall },
      { position: [6, 4], type: CellType.wall },
      { position: [7, 2], type: CellType.wall },
      { position: [7, 8], type: CellType.wall },
      { position: [8, 0], type: CellType.wall },
      { position: [8, 1], type: CellType.wall },
      { position: [8, 2], type: CellType.wall },
      { position: [2, 0], type: CellType.void },
      { position: [3, 2], type: CellType.void },
      { position: [4, 5], type: CellType.void },
      { position: [7, 6], type: CellType.void },
      { position: [8, 6], type: CellType.void },
      { position: [9, 4], type: CellType.enemy },
    ],
  },
  hwDZs1n: {
    dimensions: {
      cols: 10,
      rows: 10,
    },
    start: [9, 4],
    end: [0, 9],
    obstacles: [
      { position: [0, 1], type: CellType.wall },
      { position: [2, 1], type: CellType.wall },
      { position: [2, 5], type: CellType.wall },
      { position: [2, 6], type: CellType.wall },
      { position: [2, 7], type: CellType.wall },
      { position: [2, 8], type: CellType.wall },
      { position: [3, 1], type: CellType.wall },
      { position: [3, 3], type: CellType.wall },
      { position: [3, 7], type: CellType.wall },
      { position: [4, 1], type: CellType.wall },
      { position: [4, 7], type: CellType.wall },
      { position: [5, 3], type: CellType.wall },
      { position: [5, 7], type: CellType.wall },
      { position: [6, 3], type: CellType.wall },
      { position: [7, 1], type: CellType.wall },
      { position: [7, 2], type: CellType.wall },
      { position: [7, 4], type: CellType.wall },
      { position: [8, 5], type: CellType.wall },
      { position: [9, 6], type: CellType.wall },
      { position: [0, 8], type: CellType.void },
      { position: [1, 2], type: CellType.void },
      { position: [1, 6], type: CellType.void },
      { position: [5, 9], type: CellType.void },
      { position: [4, 5], type: CellType.enemy },
      { position: [3, 9], type: CellType.enemy },
    ],
  },
  HdDHs7f: {
    dimensions: {
      cols: 10,
      rows: 10,
    },
    start: [9, 9],
    end: [9, 0],
    obstacles: [
      { position: [0, 3], type: CellType.wall },
      { position: [1, 3], type: CellType.wall },
      { position: [2, 3], type: CellType.wall },
      { position: [2, 6], type: CellType.wall },
      { position: [2, 7], type: CellType.wall },
      { position: [2, 8], type: CellType.wall },
      { position: [3, 1], type: CellType.wall },
      { position: [3, 3], type: CellType.wall },
      { position: [4, 3], type: CellType.wall },
      { position: [3, 6], type: CellType.wall },
      { position: [3, 8], type: CellType.wall },
      { position: [4, 1], type: CellType.wall },
      { position: [4, 8], type: CellType.wall },
      { position: [5, 1], type: CellType.wall },
      { position: [5, 3], type: CellType.wall },
      { position: [5, 6], type: CellType.wall },
      { position: [5, 8], type: CellType.wall },
      { position: [6, 1], type: CellType.wall },
      { position: [6, 8], type: CellType.wall },
      { position: [7, 8], type: CellType.wall },
      { position: [8, 8], type: CellType.wall },
      { position: [9, 8], type: CellType.wall },
      { position: [8, 2], type: CellType.void },
      { position: [9, 2], type: CellType.void },
      { position: [7, 1], type: CellType.enemy },
      { position: [0, 6], type: CellType.enemy },
    ],
  },
  ZEx3OUR: {
    dimensions: {
      cols: 10,
      rows: 10,
    },
    start: [9, 0],
    end: [4, 4],
    obstacles: [
      { position: [0, 4], type: CellType.wall },
      { position: [2, 2], type: CellType.wall },
      { position: [2, 3], type: CellType.wall },
      { position: [2, 4], type: CellType.wall },
      { position: [2, 5], type: CellType.wall },
      { position: [2, 6], type: CellType.wall },
      { position: [2, 7], type: CellType.wall },
      { position: [3, 3], type: CellType.wall },
      { position: [3, 7], type: CellType.wall },
      { position: [4, 0], type: CellType.wall },
      { position: [4, 3], type: CellType.wall },
      { position: [4, 5], type: CellType.wall },
      { position: [4, 7], type: CellType.wall },
      { position: [5, 3], type: CellType.wall },
      { position: [5, 4], type: CellType.wall },
      { position: [5, 5], type: CellType.wall },
      { position: [5, 7], type: CellType.wall },
      { position: [6, 3], type: CellType.wall },
      { position: [6, 7], type: CellType.wall },
      { position: [7, 3], type: CellType.wall },
      { position: [7, 5], type: CellType.wall },
      { position: [7, 6], type: CellType.wall },
      { position: [7, 7], type: CellType.wall },
      { position: [8, 3], type: CellType.wall },
      { position: [9, 3], type: CellType.enemy },
      { position: [1, 7], type: CellType.enemy },
      { position: [9, 8], type: CellType.void },
    ],
  },
  wb3tHdg: {
    dimensions: {
      cols: 10,
      rows: 10,
    },
    start: [9, 9],
    end: [1, 1],
    obstacles: [
      { position: [0, 3], type: CellType.void },
      { position: [1, 3], type: CellType.void },
      { position: [2, 3], type: CellType.void },
      { position: [3, 3], type: CellType.void },
      { position: [4, 1], type: CellType.wall },
      { position: [4, 2], type: CellType.wall },
      { position: [5, 2], type: CellType.wall },
      { position: [5, 4], type: CellType.wall },
      { position: [6, 0], type: CellType.wall },
      { position: [6, 2], type: CellType.wall },
      { position: [6, 5], type: CellType.wall },
      { position: [6, 7], type: CellType.wall },
      { position: [7, 6], type: CellType.wall },
      { position: [8, 1], type: CellType.wall },
      { position: [8, 6], type: CellType.wall },
      { position: [9, 1], type: CellType.wall },
      { position: [9, 6], type: CellType.wall },
      { position: [4, 5], type: CellType.enemy },
    ],
  },
};

export default mockData;

export const MAX_LEVELS = 5;
